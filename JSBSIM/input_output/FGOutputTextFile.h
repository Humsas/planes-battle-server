/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 Header:       FGOutputTextFile.h
 Author:       Bertrand Coconnier
 Date started: 09/17/11

 ------------- Copyright (C) 2011 Bertrand Coconnier -------------

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free Software
 Foundation; either version 2 of the License, or (at your option) any later
 version.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 details.

 You should have received a copy of the GNU Lesser General Public License along with
 this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 Place - Suite 330, Boston, MA  02111-1307, USA.

 Further information about the GNU Lesser General Public License can also be found on
 the world wide web at http://www.gnu.org.

HISTORY
--------------------------------------------------------------------------------
09/17/11   BC    Created

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SENTRY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifndef FGOUTPUTTEXTFILE_H
#define FGOUTPUTTEXTFILE_H

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
INCLUDES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <fstream>

#include "FGOutputFile.h"

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DEFINITIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#define ID_OUTPUTTEXTFILE "$Id: FGOutputTextFile.h,v 1.1 2012/09/05 21:49:19 bcoconni Exp $"

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FORWARD DECLARATIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

namespace JSBSim {

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CLASS DOCUMENTATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/** Implements the output to a human readable text file. This class uses the
    standard C++ library to open and close a file to which output values are
    comma-separated (CSV) or tabulated (TAB).
 */

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CLASS DECLARATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

class FGOutputTextFile : public FGOutputFile
{
public:
  /** Constructor that read the output directives from an XML file.
      @param fdmex a pointer to the parent executive object
      @param element XML Element that is pointing to the output directives
      @param _delim delimiter of the output values (most likely a comma or a
                    tab)
      @param idx ID of the output instance that is constructed
   */
  FGOutputTextFile(FGFDMExec* fdmex, Element* element,
                   const std::string& _delim, int idx);
  /** Constructor to which all the needed data are passed by parameters. When an
      instance is generated by this constructor, the method SetOutputName() must
      be called afterwards to set the file name to which the output will be
      directed. Otherwise the OS will likely complain that you try to open a
      file with an empty name.
      @param fdmex a pointer to the parent executive object
      @param _delim delimiter of the output values (most likely a comma or a
                    tab)
      @param idx ID of the output instance that is constructed
      @param subSystems bitfield that describes the activated subsystems
      @param name file name to which the output will be directed
      @param outRate output rate in Hz
      @param outputProperties list of properties that should be output
   */
  FGOutputTextFile(FGFDMExec* fdmex, const string& _delim, int idx,
                   int subSystems, std::string name, double outRate,
                   std::vector<FGPropertyManager *> & outputProperties);
  /// Generates the output to the text file.
  virtual void Print(void);

protected:
  std::string delimeter;
  std::ofstream datafile;

  virtual void OpenFile(void);
  virtual void CloseFile(void) { if (datafile.is_open()) datafile.close(); }
};
}
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#endif

